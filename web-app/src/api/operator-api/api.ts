/// <reference path="./custom.d.ts" />
// tslint:disable
/**
 * SiWatchOperatorApi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as url from "url";
import * as portableFetch from "portable-fetch";
import { Configuration } from "./configuration";

const BASE_PATH = "http://192.168.88.33:8580/siwatch_operator_api".replace(/\/+$/, "");

/**
 *
 * @export
 */
export const COLLECTION_FORMATS = {
    csv: ",",
    ssv: " ",
    tsv: "\t",
    pipes: "|",
};

/**
 *
 * @export
 * @interface FetchAPI
 */
export interface FetchAPI {
    (url: string, init?: any): Promise<Response>;
}

/**
 *  
 * @export
 * @interface FetchArgs
 */
export interface FetchArgs {
    url: string;
    options: any;
}

/**
 * 
 * @export
 * @class BaseAPI
 */
export class BaseAPI {
    protected configuration: Configuration | undefined;

    constructor(configuration?: Configuration, protected basePath: string = BASE_PATH, protected fetch: FetchAPI = portableFetch) {
        if (configuration) {
            this.configuration = configuration;
            this.basePath = configuration.basePath || this.basePath;
        }
    }
};

/**
 * 
 * @export
 * @class RequiredError
 * @extends {Error}
 */
export class RequiredError extends Error {
    name: "RequiredError" = "RequiredError";
    constructor(public field: string, msg?: string) {
        super(msg);
    }
}

/**
 * 
 * @export
 * @interface CheckPoint
 */
export interface CheckPoint {
    /**
     * 
     * @type {string}
     * @memberof CheckPoint
     */
    address?: string;
    /**
     * 
     * @type {Date}
     * @memberof CheckPoint
     */
    arrivalTime?: Date;
    /**
     * 
     * @type {Date}
     * @memberof CheckPoint
     */
    departureTime?: Date;
    /**
     * 
     * @type {string}
     * @memberof CheckPoint
     */
    description?: string;
    /**
     * 
     * @type {number}
     * @memberof CheckPoint
     */
    factTime?: number;
    /**
     * 
     * @type {number}
     * @memberof CheckPoint
     */
    latitude?: number;
    /**
     * 
     * @type {number}
     * @memberof CheckPoint
     */
    longitude?: number;
    /**
     * 
     * @type {string}
     * @memberof CheckPoint
     */
    name?: string;
    /**
     * 
     * @type {number}
     * @memberof CheckPoint
     */
    order?: number;
    /**
     * 
     * @type {number}
     * @memberof CheckPoint
     */
    planTime?: number;
    /**
     * 
     * @type {number}
     * @memberof CheckPoint
     */
    radius?: number;
}

/**
 * 
 * @export
 * @interface LocationDto
 */
export interface LocationDto {
    /**
     * 
     * @type {number}
     * @memberof LocationDto
     */
    accuracy?: number;
    /**
     * 
     * @type {number}
     * @memberof LocationDto
     */
    altitude?: number;
    /**
     * 
     * @type {Date}
     * @memberof LocationDto
     */
    deviceTime?: Date;
    /**
     * 
     * @type {number}
     * @memberof LocationDto
     */
    direction?: number;
    /**
     * 
     * @type {number}
     * @memberof LocationDto
     */
    id?: number;
    /**
     * 
     * @type {number}
     * @memberof LocationDto
     */
    latitude?: number;
    /**
     * 
     * @type {number}
     * @memberof LocationDto
     */
    longitude?: number;
    /**
     * 
     * @type {Date}
     * @memberof LocationDto
     */
    recordTime?: Date;
    /**
     * 
     * @type {number}
     * @memberof LocationDto
     */
    routeDistance?: number;
    /**
     * 
     * @type {number}
     * @memberof LocationDto
     */
    speed?: number;
}

/**
 * 
 * @export
 * @interface RouteDto
 */
export interface RouteDto {
    /**
     * 
     * @type {Array<CheckPoint>}
     * @memberof RouteDto
     */
    checkPoints?: Array<CheckPoint>;
    /**
     * 
     * @type {number}
     * @memberof RouteDto
     */
    id?: number;
    /**
     * 
     * @type {Array<RoutePoint>}
     * @memberof RouteDto
     */
    routePoints?: Array<RoutePoint>;
    /**
     * 
     * @type {string}
     * @memberof RouteDto
     */
    status?: string;
    /**
     * 
     * @type {SupervisorDto}
     * @memberof RouteDto
     */
    supervisor?: SupervisorDto;
}

/**
 * 
 * @export
 * @interface RoutePoint
 */
export interface RoutePoint {
    /**
     * 
     * @type {number}
     * @memberof RoutePoint
     */
    id?: number;
    /**
     * 
     * @type {number}
     * @memberof RoutePoint
     */
    latitude?: number;
    /**
     * 
     * @type {number}
     * @memberof RoutePoint
     */
    longitude?: number;
    /**
     * 
     * @type {number}
     * @memberof RoutePoint
     */
    order?: number;
}

/**
 * 
 * @export
 * @interface SupervisorDto
 */
export interface SupervisorDto {
    /**
     * 
     * @type {string}
     * @memberof SupervisorDto
     */
    deviceId?: string;
    /**
     * 
     * @type {number}
     * @memberof SupervisorDto
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof SupervisorDto
     */
    lastName?: string;
    /**
     * 
     * @type {string}
     * @memberof SupervisorDto
     */
    middleName?: string;
    /**
     * 
     * @type {string}
     * @memberof SupervisorDto
     */
    name?: string;
}


/**
 * OperatorApiApi - fetch parameter creator
 * @export
 */
export const OperatorApiApiFetchParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Получение данных сердечного ритма с устройства
         * @param {string} deviceId deviceId
         * @param {Date} [since] since
         * @param {Date} [until] until
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeviceHeartRateUsingGET(deviceId: string, since?: Date, until?: Date, options: any = {}): FetchArgs {
            // verify required parameter 'deviceId' is not null or undefined
            if (deviceId === null || deviceId === undefined) {
                throw new RequiredError('deviceId','Required parameter deviceId was null or undefined when calling getDeviceHeartRateUsingGET.');
            }
            const localVarPath = `/api/v1/operator/device/{deviceId}/hr`
                .replace(`{${"deviceId"}}`, encodeURIComponent(String(deviceId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (since !== undefined) {
                localVarQueryParameter['since'] = (since as any).toISOString();
            }

            if (until !== undefined) {
                localVarQueryParameter['until'] = (until as any).toISOString();
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Получение данных местоположения устройства
         * @param {string} [deviceId] 
         * @param {Date} [fromTime] 
         * @param {number} [routeId] 
         * @param {Date} [toTime] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeviceLocationUsingGET(deviceId?: string, fromTime?: Date, routeId?: number, toTime?: Date, options: any = {}): FetchArgs {
            const localVarPath = `/api/v1/operator/device/location`;
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (deviceId !== undefined) {
                localVarQueryParameter['deviceId'] = deviceId;
            }

            if (fromTime !== undefined) {
                localVarQueryParameter['fromTime'] = (fromTime as any).toISOString();
            }

            if (routeId !== undefined) {
                localVarQueryParameter['routeId'] = routeId;
            }

            if (toTime !== undefined) {
                localVarQueryParameter['toTime'] = (toTime as any).toISOString();
            }

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Получение маршрута по идентификатору
         * @param {number} routeId routeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRouteUsingGET(routeId: number, options: any = {}): FetchArgs {
            // verify required parameter 'routeId' is not null or undefined
            if (routeId === null || routeId === undefined) {
                throw new RequiredError('routeId','Required parameter routeId was null or undefined when calling getRouteUsingGET.');
            }
            const localVarPath = `/api/v1/operator/route/{routeId}`
                .replace(`{${"routeId"}}`, encodeURIComponent(String(routeId)));
            const localVarUrlObj = url.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = Object.assign({ method: 'GET' }, baseOptions, options);
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            localVarUrlObj.query = Object.assign({}, localVarUrlObj.query, localVarQueryParameter, options.query);
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = Object.assign({}, localVarHeaderParameter, options.headers);

            return {
                url: url.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OperatorApiApi - functional programming interface
 * @export
 */
export const OperatorApiApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Получение данных сердечного ритма с устройства
         * @param {string} deviceId deviceId
         * @param {Date} [since] since
         * @param {Date} [until] until
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeviceHeartRateUsingGET(deviceId: string, since?: Date, until?: Date, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<any> {
            const localVarFetchArgs = OperatorApiApiFetchParamCreator(configuration).getDeviceHeartRateUsingGET(deviceId, since, until, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Получение данных местоположения устройства
         * @param {string} [deviceId] 
         * @param {Date} [fromTime] 
         * @param {number} [routeId] 
         * @param {Date} [toTime] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeviceLocationUsingGET(deviceId?: string, fromTime?: Date, routeId?: number, toTime?: Date, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<Array<LocationDto>> {
            const localVarFetchArgs = OperatorApiApiFetchParamCreator(configuration).getDeviceLocationUsingGET(deviceId, fromTime, routeId, toTime, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
        /**
         * 
         * @summary Получение маршрута по идентификатору
         * @param {number} routeId routeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRouteUsingGET(routeId: number, options?: any): (fetch?: FetchAPI, basePath?: string) => Promise<RouteDto> {
            const localVarFetchArgs = OperatorApiApiFetchParamCreator(configuration).getRouteUsingGET(routeId, options);
            return (fetch: FetchAPI = portableFetch, basePath: string = BASE_PATH) => {
                return fetch(basePath + localVarFetchArgs.url, localVarFetchArgs.options).then((response) => {
                    if (response.status >= 200 && response.status < 300) {
                        return response.json();
                    } else {
                        throw response;
                    }
                });
            };
        },
    }
};

/**
 * OperatorApiApi - factory interface
 * @export
 */
export const OperatorApiApiFactory = function (configuration?: Configuration, fetch?: FetchAPI, basePath?: string) {
    return {
        /**
         * 
         * @summary Получение данных сердечного ритма с устройства
         * @param {string} deviceId deviceId
         * @param {Date} [since] since
         * @param {Date} [until] until
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeviceHeartRateUsingGET(deviceId: string, since?: Date, until?: Date, options?: any) {
            return OperatorApiApiFp(configuration).getDeviceHeartRateUsingGET(deviceId, since, until, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Получение данных местоположения устройства
         * @param {string} [deviceId] 
         * @param {Date} [fromTime] 
         * @param {number} [routeId] 
         * @param {Date} [toTime] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getDeviceLocationUsingGET(deviceId?: string, fromTime?: Date, routeId?: number, toTime?: Date, options?: any) {
            return OperatorApiApiFp(configuration).getDeviceLocationUsingGET(deviceId, fromTime, routeId, toTime, options)(fetch, basePath);
        },
        /**
         * 
         * @summary Получение маршрута по идентификатору
         * @param {number} routeId routeId
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getRouteUsingGET(routeId: number, options?: any) {
            return OperatorApiApiFp(configuration).getRouteUsingGET(routeId, options)(fetch, basePath);
        },
    };
};

/**
 * OperatorApiApi - object-oriented interface
 * @export
 * @class OperatorApiApi
 * @extends {BaseAPI}
 */
export class OperatorApiApi extends BaseAPI {
    /**
     * 
     * @summary Получение данных сердечного ритма с устройства
     * @param {string} deviceId deviceId
     * @param {Date} [since] since
     * @param {Date} [until] until
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OperatorApiApi
     */
    public getDeviceHeartRateUsingGET(deviceId: string, since?: Date, until?: Date, options?: any) {
        return OperatorApiApiFp(this.configuration).getDeviceHeartRateUsingGET(deviceId, since, until, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Получение данных местоположения устройства
     * @param {string} [deviceId] 
     * @param {Date} [fromTime] 
     * @param {number} [routeId] 
     * @param {Date} [toTime] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OperatorApiApi
     */
    public getDeviceLocationUsingGET(deviceId?: string, fromTime?: Date, routeId?: number, toTime?: Date, options?: any) {
        return OperatorApiApiFp(this.configuration).getDeviceLocationUsingGET(deviceId, fromTime, routeId, toTime, options)(this.fetch, this.basePath);
    }

    /**
     * 
     * @summary Получение маршрута по идентификатору
     * @param {number} routeId routeId
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OperatorApiApi
     */
    public getRouteUsingGET(routeId: number, options?: any) {
        return OperatorApiApiFp(this.configuration).getRouteUsingGET(routeId, options)(this.fetch, this.basePath);
    }

}

